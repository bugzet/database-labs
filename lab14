PS C:\Users\kubat> cd "C:\Program Files\PostgreSQL\17\bin"
PS C:\Program Files\PostgreSQL\17\bin> psql -U postgres
Password for user postgres:

psql (17.6)
Type "help" for help.

postgres=# CREATE TABLE accounts (
postgres(#     account_id SERIAL PRIMARY KEY,
postgres(#     account_name VARCHAR(50),
postgres(#     balance NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO accounts (account_name, balance) VALUES
postgres-# ('Kubat', 1200.00),
postgres-# ('Aigerim', 800.00),
postgres-# ('Nurlan', 1500.00);
INSERT 0 3
postgres=# CREATE TABLE customers (
postgres(#     customer_id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(50),
postgres(#     email VARCHAR(100)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO customers (name, email) VALUES
postgres-# ('Aibek', 'aibek@mail.com'),
postgres-# ('Meerim', 'meerim@mail.com'),
postgres-# ('Tilek', 'tilek@mail.com');
INSERT 0 3
postgres=# CREATE TABLE orders (
postgres(#     order_id SERIAL PRIMARY KEY,
postgres(#     customer_id INT REFERENCES customers(customer_id),
postgres(#     total NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO orders (customer_id, total) VALUES
postgres-# (1, 240.00),
postgres-# (2, 175.00);
INSERT 0 2
postgres=# CREATE TABLE order_items (
postgres(#     order_item_id SERIAL PRIMARY KEY,
postgres(#     order_id INT REFERENCES orders(order_id),
postgres(#     product_id INT,
postgres(#     quantity INT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO order_items (order_id, product_id, quantity) VALUES
postgres-# (1, 201, 2),
postgres-# (2, 202, 1);
INSERT 0 2
postgres=# CREATE TABLE inventory (
postgres(#     product_id INT PRIMARY KEY,
postgres(#     product_name VARCHAR(50),
postgres(#     stock INT
postgres(# );
CREATE TABLE
postgres=# INSERT INTO inventory (product_id, product_name, stock) VALUES
postgres-# (201, 'Monitor', 8),
postgres-# (202, 'Mouse', 25),
postgres-# (203, 'Keyboard', 15);
INSERT 0 3
postgres=# CREATE TABLE products (
postgres(#     product_id SERIAL PRIMARY KEY,
postgres(#     name VARCHAR(50),
postgres(#     price NUMERIC(10,2)
postgres(# );
CREATE TABLE
postgres=# INSERT INTO products (name, price) VALUES
postgres-# ('Monitor', 320.00),
postgres-# ('Mouse', 22.00),
postgres-# ('Keyboard', 75.00);
INSERT 0 3
postgres=# CREATE TABLE logs (
postgres(#     log_id SERIAL PRIMARY KEY,
postgres(#     message TEXT,
postgres(#     created_at TIMESTAMP DEFAULT NOW()
postgres(# );
CREATE TABLE
postgres=# CREATE TABLE audit_log (
postgres(#     audit_id SERIAL PRIMARY KEY,
postgres(#     action VARCHAR(50),
postgres(#     timestamp TIMESTAMP DEFAULT NOW()
postgres(# );
CREATE TABLE
postgres=# BEGIN;
BEGIN
postgres=*# UPDATE accounts SET balance = balance - 200 WHERE account_id = 1;
UPDATE 1
postgres=*# UPDATE accounts SET balance = balance + 200 WHERE account_id = 2;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# SELECT balance FROM accounts WHERE account_id = 1;
 balance
---------
 1000.00
(1 row)


postgres=*# UPDATE accounts SET balance = balance - 300 WHERE account_id = 1;
UPDATE 1
postgres=*# UPDATE accounts SET balance = balance + 300 WHERE account_id = 2;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 250.00);
INSERT 0 1
postgres=*# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 201, 1);
INSERT 0 1
postgres=*# UPDATE inventory SET stock = stock - 1 WHERE product_id = 201;
UPDATE 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO customers (name, email) VALUES ('Madina', 'madina@mail.com');
INSERT 0 1
postgres=*# INSERT INTO orders (customer_id, total) VALUES (LASTVAL(), 400.00);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN
postgres=*# SELECT * FROM accounts;
 account_id | account_name | balance
------------+--------------+---------
          3 | Nurlan       | 1500.00
          1 | Kubat        |  700.00
          2 | Aigerim      | 1300.00
(3 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN
postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          2 | Aigerim      | 1300.00
          3 | Nurlan       | 1500.00
(2 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN
postgres=*# SELECT * FROM accounts WHERE balance > 1000;
 account_id | account_name | balance
------------+--------------+---------
          2 | Aigerim      | 1300.00
          3 | Nurlan       | 1500.00
(2 rows)


postgres=*# COMMIT;
COMMIT
postgres=# BEGIN TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN
postgres=*# SELECT * FROM accounts;
 account_id | account_name | balance
------------+--------------+---------
          1 | Kubat        |  700.00
          2 | Aigerim      | 1300.00
          3 | Nurlan       | 1500.00
(3 rows)


postgres=*# UPDATE accounts SET balance = balance * 1.05;
UPDATE 3
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO customers (name, email) VALUES ('Ruslan', 'ruslan@mail.com');
INSERT 0 1
postgres=*# SAVEPOINT after_customer_insert;
SAVEPOINT
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 600.00);
INSERT 0 1
postgres=*# ROLLBACK TO SAVEPOINT after_customer_insert;
ROLLBACK
postgres=*# INSERT INTO orders (customer_id, total) VALUES (1, 350.00);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO products (name, price) VALUES ('Tablet', 450.00);
INSERT 0 1
postgres=*# SAVEPOINT sp1;
SAVEPOINT
postgres=*# INSERT INTO products (name, price) VALUES ('Headphones', 120.00);
INSERT 0 1
postgres=*# SAVEPOINT sp2;
SAVEPOINT
postgres=*# ROLLBACK TO SAVEPOINT sp2;
ROLLBACK
postgres=*# INSERT INTO products (name, price) VALUES ('Smartwatch', 250.00);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO logs (message) VALUES ('Process started');
INSERT 0 1
postgres=*# SAVEPOINT step_one;
SAVEPOINT
postgres=*# INSERT INTO logs (message) VALUES ('Process finished successfully');
INSERT 0 1
postgres=*# RELEASE SAVEPOINT step_one;
RELEASE
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# UPDATE inventory SET stock = stock - 2 WHERE product_id = 201;
UPDATE 1
postgres=*# INSERT INTO order_items (order_id, product_id, quantity) VALUES (1, 201, 2);
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# DO $$
postgres$*# DECLARE
postgres$*#     insufficient_funds EXCEPTION;
postgres$*#     current_balance DECIMAL;
postgres$*# BEGIN
postgres$*#     SELECT balance INTO current_balance FROM accounts WHERE account_id = 1;
postgres$*#     IF current_balance < 100 THEN
postgres$*#         RAISE insufficient_funds;
postgres$*#     END IF;
postgres$*#
postgres$*#     UPDATE accounts SET balance = balance - 100 WHERE account_id = 1;
postgres$*#     UPDATE accounts SET balance = balance + 100 WHERE account_id = 2;
postgres$*#
postgres$*# EXCEPTION
postgres$*#     WHEN insufficient_funds THEN
postgres$*#         RAISE NOTICE 'Transaction failed: Insufficient funds';
postgres$*# END $$;
DO
postgres=*# COMMIT;
COMMIT
postgres=# BEGIN;
BEGIN
postgres=*# INSERT INTO audit_log (action, timestamp) VALUES ('user_creation', NOW());
INSERT 0 1
postgres=*# INSERT INTO customers (name, email) VALUES ('Aizada', 'aizada@mail.com');
INSERT 0 1
postgres=*# COMMIT;
COMMIT
postgres=# SELECT * FROM audit_log;
 audit_id |    action     |          timestamp
----------+----------------+----------------------------
        1 | user_creation  | 2025-10-16 10:30:25.987652
(1 row)


postgres=#
